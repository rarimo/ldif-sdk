package mt

import (
	"math/big"

	"github.com/iden3/go-iden3-crypto/poseidon"
	"gitlab.com/distributed_lab/logan/v3"
	"gitlab.com/distributed_lab/logan/v3/errors"
)

const _hashlength = 32

// Poseidon is the Poseidon hashing method.
type Poseidon struct{}

// NewPoseidon creates a new Poseidon hashing method with `frameSize` set to 16.
func NewPoseidon() *Poseidon {
	return &Poseidon{}
}

// Hash generates a Poseidon hash from a byte array.
func (ph *Poseidon) Hash(data ...[]byte) []byte {
	dataSize := len(data)
	bigData := make([]*big.Int, dataSize)
	for i := 0; i < dataSize; i++ {
		bigData[i] = new(big.Int).SetBytes(data[i])
	}

	dataHash, err := poseidon.Hash(bigData)
	if err != nil {
		panic(errors.Wrap(err, "failed to hash poseidon", logan.F{
			"data": bigData,
		}))
	}

	return dataHash.Bytes()
}

// HashLength returns the length of hashes generated by Hash() in bytes.
func (ph *Poseidon) HashLength() int {
	return _hashlength
}

// HashName returns the name of this hash.
func (ph *Poseidon) HashName() string {
	return "poseidon"
}
